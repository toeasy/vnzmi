<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我的乐与怒</title>
    <description>关于生活和code | Vincent Mi</description>
    <link>http://vnzmi.com/</link>
    <atom:link href="http://vnzmi.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 06 Jun 2016 19:04:49 +0800</pubDate>
    <lastBuildDate>Mon, 06 Jun 2016 19:04:49 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Hello 2016</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;又换了一个博客。&lt;/p&gt;

&lt;p&gt;习惯了Markdown和git所以还是换到github来比较靠谱&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;使用Jekyll构建这个博客,感谢Hex修改的模版.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;搬文章了,蛋疼.希望这是最后一次&lt;/p&gt;

&lt;p&gt;—— 2016.6&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Jun 2016 20:00:00 +0800</pubDate>
        <link>http://vnzmi.com/2016/06/02/hello-2016/</link>
        <guid isPermaLink="true">http://vnzmi.com/2016/06/02/hello-2016/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>CentOS 6.5 docker 错误</title>
        <description>&lt;p&gt;Docker 在centos6.5中安装因为 device-mapper 不正确会报这个错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    \n三  6月 10 16:46:56 CST 2015\n
    time=&quot;2015-06-10T16:46:56+08:00&quot; level=&quot;info&quot; msg=&quot;+job serveapi(unix:///var/run/docker.sock)&quot; 
    time=&quot;2015-06-10T16:46:56+08:00&quot; level=&quot;info&quot; msg=&quot;WARNING: You are running linux kernel version 2.6.32-431.el6.x86_64, which might be unstable running docker. Please upgrade your kernel to 3.8.0.&quot; 
    time=&quot;2015-06-10T16:46:56+08:00&quot; level=&quot;info&quot; msg=&quot;Listening for HTTP on unix (/var/run/docker.sock)&quot; 
    /usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解决方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo yum install device-mapper-event-libs
    sudo yum reinstall docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 11 Jun 2015 01:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/06/11/docker-issue/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/06/11/docker-issue/</guid>
        
        <category>运维</category>
        
        
      </item>
    
      <item>
        <title>在CentOS下安装PPTP的VPN</title>
        <description>&lt;p&gt;http://www.black-xstar.com/blog/691.html&lt;/p&gt;

&lt;p&gt;最近买了个基于xen的VPS玩玩，安装LAMP没啥意思。国内网络环境不好，干脆安装个VPN试试。&lt;/p&gt;

&lt;p&gt;对于Linux其实我什么都不会的，在google老师的帮助下，总算给我安装好了，记录下来以便查阅。&lt;/p&gt;

&lt;p&gt;VPN常用有两种，一种是openvpn，另一种PPTP。前者开源跨平台功能强大，后者简单方便Windows下无需安装客户端。而且从安装上看，PPTP比openvpn简单一点，所以决定安装这个试试看。&lt;/p&gt;

&lt;p&gt;这里罗嗦一下VPS吧，常见也两种，一种是基于openvz，另一种基于xen的。区别不多说了，自己问google吧。这里要说的是openvz的绝大多数不能安装PPTP，而xen的没有限制，两个都可以。&lt;/p&gt;

&lt;p&gt;以下所有命令我都加了下划线，即加下划线的一定是在类似-bash-3.2#的提示符下输入。&lt;/p&gt;

&lt;p&gt;SSH登陆VPS，我的系统是64的CentOS 5.4，绝大多数VPS都提供CentOS系统供选择。可以使用这个命令查询：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/issue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;检查内核是否包含mppe，基本上CentOS都有的，输入这个命令，如果是ok就可以：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modprobe ppp-compress-18 &amp;amp;&amp;amp; echo ok
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装PPTP需要ppp和iptables这两个软件支持，这里用yum来安装，输入这个命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install -y ppp iptables
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;![4f670a90f603738d88d1899eb31bb051f919ec5e.jpg][/img/in-post/1235339652.jpg]&lt;/p&gt;

&lt;p&gt;然后进入tmp目录，需要把pptp软件下载回来，用这个命令：cd /tmp&lt;/p&gt;

&lt;p&gt;去poptop官方网站，如果你和我系统一样，直接下载rpm包：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.3.4-1.rhel5.1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;![2.jpg][/img/in-post/3785427575.jpg]&lt;/p&gt;

&lt;p&gt;×××如果上面命令无效，安装wget吧：&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install -y wget&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来安装刚刚下载回来的rpm包，输入命令：&lt;code class=&quot;highlighter-rouge&quot;&gt;rpm -ivh pptpd-1.3.4-1.rhel5.1.x86_64.rpm&lt;/code&gt;
![3.jpg][/img/in-post/3438269410.jpg]&lt;/p&gt;

&lt;p&gt;×××如果上面命令无效，安装perl吧：&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install -y perl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来我们开始配置PPTP了，需要用到linux下的vi命令，如果不熟悉建议先google一下。&lt;/p&gt;

&lt;p&gt;×××提示一下，编辑完成后按Esc键，然后输入:wq即可保存并退出。&lt;/p&gt;

&lt;p&gt;输入vi /etc/ppp/options.pptpd开始编辑，输入以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name pptpd 
refuse-pap 
refuse-chap 
refuse-mschap 
require-mschap-v2 
require-mppe-128 
proxyarp 
lock 
nobsdcomp 
novj 
novjccomp 
nologfd 
ms-dns 208.67.222.222 
ms-dns 208.67.220.220
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后两行是dns服务器地址，这里用opendns，你也可以用主机商的dns。编辑完成后保存退出。&lt;/p&gt;

&lt;p&gt;输入vi /etc/pptpd.conf开始编辑，输入以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;option /etc/ppp/options.pptpd 
logwtmp 
localip 192.168.8.1 
remoteip 192.168.8.2-40
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后两行是vpn的ip地址分配，如果你不熟悉就别改了。编辑完成后保存退出。&lt;/p&gt;

&lt;p&gt;输入vi /etc/ppp/chap-secrets开始编辑，输入以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username1 pptpd password1 *

username2 pptpd password2 *

username3 pptpd password3 *
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个文件用来配置vpn的登陆用户和密码，一行一个。编辑完成后保存退出。&lt;/p&gt;

&lt;p&gt;把username和password分别改成你需要的用户名密码即可，其他别改了。&lt;/p&gt;

&lt;p&gt;输入vi /etc/sysctl.conf开始编辑，这个文件和上面不同，里面已经有内容：&lt;/p&gt;

&lt;p&gt;找到&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.ipv4.ip_forward = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;改成&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.ipv4.ip_forward = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;保存并退出，然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt;这个命令。&lt;/p&gt;

&lt;p&gt;这时，PPTP基本上配置好了，输入service pptpd start启动。&lt;/p&gt;

&lt;p&gt;下面来配置iptables，首先输入service iptables start启动。&lt;/p&gt;

&lt;p&gt;然后分别输入下面四条命令，每天输完后要记得按回车：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 1723 -j ACCEPT

iptables -A INPUT -p tcp --dport 47 -j ACCEPT

iptables -A INPUT -p gre -j ACCEPT

iptables -t nat -A POSTROUTING -s 192.168.8.0/24 -o eth0 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成后输入/etc/init.d/iptables save保存，并且输入/etc/init.d/iptables restart重新启动。&lt;/p&gt;

&lt;p&gt;如果你需要服务器启动时候自动启动VPN服务，还需要输入chkconfig pptpd on和chkconfig iptables on这两条命令。&lt;/p&gt;

&lt;p&gt;这个时候，PPTP的VPN就已经全部配置好了，由于内容太多，就不截图了，说明已经很详细。&lt;/p&gt;

&lt;p&gt;在Windows下新建一个VPN连接，输入服务器ip、用户名和密码，如无意外就能连上去了。&lt;/p&gt;

&lt;p&gt;打开youtube或twitter（follow我@billzhong）试试，爽吧！&lt;/p&gt;

&lt;p&gt;最后广告一下，我的 VPN 服务： http://pptp.us 提供PPTP、L2TP和OpenVPN三种方式哦。&lt;/p&gt;

&lt;p&gt;参考文章：&lt;/p&gt;

&lt;p&gt;http://blog.s135.com/pptp_vpn/&lt;/p&gt;

&lt;p&gt;http://rashost.com/blog/centos5-pptpd-vpn&lt;/p&gt;

&lt;p&gt;http://taiwanwolf.blogspot.com/2009/01/centos-v52-pptp-server.html&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 07:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/06/10/centos-pptp/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/06/10/centos-pptp/</guid>
        
        <category>RD</category>
        
        
      </item>
    
      <item>
        <title>CXF添加Header</title>
        <description>&lt;p&gt;CXF的header处理了半天。。。&lt;/p&gt;

&lt;p&gt;添加拦截器&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HotelHeaderInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractSoapInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoapMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fault&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		    
		    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
		 
		    &lt;span class=&quot;n&quot;&gt;AuthenticationHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCulture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tourico&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webservices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Culture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EN_US&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLoginName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		    
		    &lt;span class=&quot;n&quot;&gt;JAXBElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHeaders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createAuthenticationHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		    
		    &lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aheader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBDataBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HEADER_LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JAXBException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				
				&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用服务之前处理&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;IDestinationContracts&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIISDestinationHosting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxfClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			
			&lt;span class=&quot;n&quot;&gt;cxfClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeaderInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 11 May 2015 07:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/11/cxf-header/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/11/cxf-header/</guid>
        
        <category>RD</category>
        
        
      </item>
    
      <item>
        <title>ENC28J60接线</title>
        <description>&lt;p&gt;英文原版 [https://maniacbug.wordpress.com/2012/03/30/rf24network/][https://maniacbug.wordpress.com/2012/03/30/rf24network/]
翻译: Vincent Mi [http://vnzmi.com/rf24network-for-wireless-sensor-networking.html][http://vnzmi.com/rf24network-for-wireless-sensor-networking.html]&lt;/p&gt;

&lt;p&gt;![7013108743_416996c44c_z.jpg][/img/in-post/3153790176.jpg]&lt;/p&gt;

&lt;p&gt;[RF24Network][http://maniacbug.github.io/RF24Network/]网络是一个使用Nordic nRF24L01+ 无线，运行在Arduino兼容硬件的网络层。他的目标是成为Arduino单元通信的除Xbee外的另外一个选择。他提供一个主机地址空间和消息路由最高支持6000个节点，形成一个有能力和可扩展的无线传感器网络系统。 同时让两个节点之间的通讯更加简单。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;今天，我在一个单独的网络管理17个节点。现在我需要创建更多的节点，因为这个系统可以很好的工作在17个节点，也可以处理上千的节点。&lt;/p&gt;

&lt;p&gt;## 硬件
Arduino ,最快的获取RF24兼容硬件的方式是创建一个入门板，或者ProtoShield板。这些可以从其他的一些文章找到。如下图中 03 和043。
.&lt;/p&gt;

&lt;p&gt;最后我需要一些更小，更便宜，更节能，所以我创建了一个低能耗无线传感器节点。这篇文章内容使用了V3版本的传感器单元。见附图，他们是04，011，021，而01，02使用的是更早的版本。其余的使用更高的版本。创建的他们的方式都略有不同。这带给我大量经验去找到更好的打包方式。最后031节点获得了优胜。将作为V5版本进行迭代优化。我将创建10个使用2个AA电池安装PCB板的节点。&lt;/p&gt;

&lt;p&gt;## 简单的发送和接收
这个Hello World示例说明在两个节点通讯有多简单。接收在一个节点发送在另外的节点。&lt;/p&gt;

&lt;p&gt;这里有三个部分:&lt;/p&gt;

&lt;p&gt;### 静态初始化
首先，静态初始化准备这个无线电，设置地址。在这个例子，我们认为我们自己是  “Node #1” ,将与 “Node #0” 进行通讯。当然跳线要结对。在这个例子中我们使用9和10.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// nRF24L01(+) radio attached using Getting Started board 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RF24&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Network uses that radio
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RF24Network&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Address of our node
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Address of the other node
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// How often to send &#39;hello world to the other unit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ms
&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// When did we last send?
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// How many have we sent already
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packets_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Structure of our payload
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload_t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;### setup()
第二步, ‘setup()’ 简单的打印出一个欢迎信息并初始化无线层。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RF24Network/examples/helloworld_tx/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
  &lt;span class=&quot;n&quot;&gt;SPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*channel*/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*node address*/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;### 发送 loop()
最后, loop()通常发送消息到其他单元。 记住RF24Network通常需要调用update() 来处理数据包。最好不要调用delay在整个系统中。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Pump the network regularly
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;// If it&#39;s time to send a message, send it!
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sending...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packets_sent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RF24NetworkHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*to node*/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ok.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;### 接收 loop()
还有我们来看一下接收器的例子，这个和传输的loop()有所不同。他一直查询数据包从无线模块取出，打印到控制台。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Pump the network regularly
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;// Is there anything ready for us?
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If so, grab it and print it out
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RF24NetworkHeader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Received packet #&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; at &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;### 地址分布
![7015275513_73663f8a74.jpg][/img/in-post/2931979606.jpg]&lt;/p&gt;

&lt;p&gt;RF24Network在节点少的时候工作的非常好，但是他是设计用于整个房间的节点。节点在树拓扑中根据节点地址自动配置。节点只能直接与他们的父节点和子节点进行通信。网络将自动发送消息到正确的地方。&lt;/p&gt;

&lt;p&gt;#00是 基础节点，#01-#05 直接与#00通讯，但是互相之间不进行通讯。所以如果#01要发送消息到#02，他将通过#00的转发，#011,#021,#031等等是#01的子节点。所以#011发送到#02,他将发送到 #01然后#00 然后#02.因此，如果你放一个节点#011到你的网络，确定有节点#01在网络，并且是开启电源也在通讯范围内。&lt;/p&gt;

&lt;p&gt;![6782822751_739036c12e.jpg][/img/in-post/2760920830.jpg]&lt;/p&gt;

&lt;p&gt;在实践中，我设计了router(路由)节点 #01-#05到每一层，使用了外接天线和墙壁电源。然后本层的所有节点都与本层的父节点进行通讯。上面的图片是一个标准的V3节点，加上特别的电源模块。以便可以插入墙壁电源。无线单元被加上了天线。&lt;/p&gt;

&lt;p&gt;### 创建无线传感器网络
sensornet（传感器网络）的例子是开始创建传感器网络的地方。这个例子演示如何从任意节点发送一对传感器读数到根节点。
读数是一个连接到模拟输入A2的温度传感器，以及一个电压传感器连接到A3口。每个节点没4秒会发送ping到基本节点。这个一个很好的心跳检测。在实际的系统中你将可能需要更长的时间间隔。叶子节点将休眠以延迟电池寿命。&lt;/p&gt;

&lt;p&gt;根节点简单的转储到控制台并跟踪数据包的丢失情况。这样我们可以在测试时检查网络的健康状况。在真实的应用中。你可能需要存储或者发送这些内容到其他地方。比如 Pachube（Vincent:一个云平台，收集传感器信息）；&lt;/p&gt;

&lt;p&gt;### 载荷详情
RF24网络在每一帧中发送2部分的内容，头和内容。头由库文件定义用来确保帧被发送到正确的地方和提供标准信息。定义在RF24Network.h 中.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* Header which is sent with each message
*
* The frame put over the air consists of this header and a message
*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RF24NetworkHeader&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&amp;lt; Logical address where the message was generated */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&amp;lt; Logical address where the message is going */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&amp;lt; Sequential message ID, incremented every message */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&amp;lt; Type of the packet.  0-127 are user-defined types, 128-255 are reserved for system */&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&amp;lt; Reserved for future use */&lt;/span&gt;
 
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个消息是由应用定义，页头使用一个单独的字符来跟踪消息的类型。这样你的应用可以有不同的消息类型来传输不同类型的信息。在这个sersornet示例中，我们将只使用类型为S的消息。意思是 “Sensor Data”.&lt;/p&gt;

&lt;p&gt;消息的定义在头文件S_message.h:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
* Sensor message (type &#39;S&#39;) 
*/&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voltage_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;S_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voltage_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个简单的包含了一个温度和电压读数。这个值是8.8位值，高位是数字低位是小数。例如 3.5V则为0x380.还包含一个方法转换成字符串用于输出。&lt;/p&gt;

&lt;p&gt;### 电压传感器
我喜欢监控每个节点的电池的级别，这样我可以知道是否一个节点什么时候需要更换电池。因此我连接来自我们电池的正级到电压传感器的输入。通过一个分压器:&lt;/p&gt;

&lt;p&gt;![6046166167_fb49f479d2_n.jpg][/img/in-post/706352279.jpg]&lt;/p&gt;

&lt;p&gt;我使用一个1M/479K 分频器电路。他将3.44V电压降低到1.1V,然后使用这个1.1V的电压做参考。这对于我的使用很完美，因为我不会使用超过3.44V的电压。当然如果你的电压超过了，你将需要一个大点的分压器。在我的这个示例中，当analogRead(A3)返回1024，我的电压是3.44V.代码如下：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// What voltage is a reading of 1023?
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voltage_reference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5.0V
// How many measurements to take.  64*1024 = 65536, so 64 is the max we can fit in a uint16_t.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_measurements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Take the voltage reading 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_measurements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analogRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voltage_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Convert the voltage reading to volts*256
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voltage_reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voltage_reference&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先,我获取64个读数，去得到一个良好的的样本大小，对于64个读数另外一个优势是这样的，他使用16bit的uint16_t，所以一个值0x8000是最大值1.1V的一半。下面我与电压参考相乘。这个参考认为.
First, I take 64 readings, to get a good sample size. The other advantage to 64 readings is that it uses the full 16-bits of a uint16_t, so a value of 0x8000 is half of the max 1.1V. Next, I multiply it by the voltage reference. That reference considers the voltage divider I have in place, telling me what voltage I ‘really‘ have on the battery if I get an 0xFFFF reading. In the case of the example, it’s 0x500, or 5V. Finally, I shift it down so the decimal point is in the correct place for an 8.8 fixed point value.&lt;/p&gt;

&lt;p&gt;### 温度传感器
在这个例子中，我选择MCP9700作为我的温度传感器。你可以选择任何你喜欢的传感器，只是记得调整计算公式。MCP9700工作时产生0.5V的电压在0度。每增加1度电压增加0.01V。完美的1.1V内部模拟参考。下面是在示例中的使用：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// Take the temp reading 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_measurements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analogRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Convert the voltage reading to celsius*256
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// This is the formula for MCP9700.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// V = reading * 1.1
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// C = ( V - 1/2 ) * 100
&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x120&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x800000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;和上面一样，我首先采样64此以获取0x0000 到 0xFFFF的值。然后使用以下的步骤进行转换：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;乘以0x120将 1.1进行8.8的小数点修正. 读入伏数并且增加增加8位小数位。&lt;/li&gt;
  &lt;li&gt;减 0x800000,也就是 0.5, 因为小数位超出了24bit.&lt;/li&gt;
  &lt;li&gt;乘 0x64 也就是 100&lt;/li&gt;
  &lt;li&gt;右移16位,将小数点从24bit移到我们需要的8bit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有这些工作是在一个32位的整数，以便有充足的位来执行此计算。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;部署&lt;/h3&gt;
&lt;p&gt;将代码上传到每个节点，开始他首选连接到串口，你可以给它设置一个地址:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RF24network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sensornet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PLATFORM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Getting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Board&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;013&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b4d3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1733003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.23&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.21&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;053&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1733709&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.82&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.70&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;043&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1734297&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.46&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.06&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;013&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1735108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.16&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.06&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;033&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1735224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;134&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.66&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.71&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;031&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1735286&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;287&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1735565&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;299&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.79&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.36&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1736871&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.78&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.07&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;023&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1737094&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.89&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;041&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1737119&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.69&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.98&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1737247&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.23&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.21&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;053&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1738025&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.82&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.70&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;043&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1738361&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.45&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.06&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;013&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1739286&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;288&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.11&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1739404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.16&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.06&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;033&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1739565&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.78&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.36&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1739574&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.68&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.71&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;031&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1741043&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.77&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.07&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;023&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1741213&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.87&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;041&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1741490&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.68&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.98&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1741492&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Received&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.21&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.21&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;053&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;### 设置休眠时间间隔
一旦他启动并且运行。你可以修改为更适合正式网络的休眠时间。我设置为每分钟从节点读取一次读数，这个可能不合适，但是可以提供一更多的扩展性。业务有时候当多个节点数据同一时间抵达跟节点时会有一些麻烦，这是一些调整的值:
&lt;code class=&quot;highlighter-rouge&quot;&gt;cpp
// Sleep constants.  In this example, the watchdog timer wakes up
// every 4s, and every single wakeup we power up the radio and send
// a reading.  In real use, these numbers which be much higher.
// Try wdt_8s and 7 cycles for one reading per minute.&amp;gt; 1
const wdt_prescalar_e wdt_prescalar = wdt_4s;
const int sleep_cycles_per_transmission = 1;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;### 接下来的步骤
这个传感器网络实例可以设置大量的传感器节点让他们启动和运行。但是之后你将如何使用这些数据？或许你像传输或者存储到某些地方，这个将会是下一篇介绍的内容。&lt;/p&gt;

&lt;p&gt;##### 提交到Pachube
和NanoDeVIP合并，我们可以从数以千计的传感器提交读数到Pachube.(或者至少从17个开始:))。&lt;/p&gt;

&lt;p&gt;##### 使用PC程序来监控网络
串口包含包含了比较多的节点信息。我正在开发一个C# WPF应用程序去总揽一个网络查看网络的工作情况。这非常不错，完成后我会分享给大家。&lt;/p&gt;

&lt;p&gt;##### 个人的简化版Pachube. 
Pachube是一个非常棒的东西，但是有几次我可能需要自己调整扑捉我数据库的读数。他回比Pachube做的少 但是我们对我的读数数据库进行我想做的任何操作。我写好了我自己的PHP+MySQL方案，但是不太好移植。我最新的想法是用Ruby on Rail服务器来实现他，ROR看起来很适合做这个。&lt;/p&gt;

&lt;p&gt;附件作者的源代码 [sensornet.zip][1928276898.zip]&lt;/p&gt;

&lt;p&gt;[RF24 Git Repo][http://maniacbug.github.com/RF24]
[RF24 Network Repo][http://maniacbug.github.com/RF24Network]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VCC  -|       |-VCC
CE   -|       |-CSN
SCK  -|       |-MOSI
MISO -|       |-IRQ
GND  -|       |-GND

Line	Arduino
GND	        GND	
3V3	        3V3	
CE	         9	
CSN	        10	
SCK	        13	
MOSI	11	
MISO	12
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 11 May 2015 07:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/11/rf24network-for-wireless-sensor-networking/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/11/rf24network-for-wireless-sensor-networking/</guid>
        
        <category>HW</category>
        
        
      </item>
    
      <item>
        <title>ENC28J60接线</title>
        <description>&lt;p&gt;[drivers.rar][/img/in-post/1847276214.rar]&lt;/p&gt;

&lt;p&gt;HanRun HR911105A 14/20&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;CLKOUT&lt;/td&gt;&lt;td&gt;INT &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;WOL&lt;/td&gt;&lt;td&gt;SO &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SI&lt;/td&gt;&lt;td&gt;SCK &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CS&lt;/td&gt;&lt;td&gt;RESET&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;接线&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;ENC28J60&amp;lt;/td&amp;gt;&lt;td&gt;Arduino Due/UNO&lt;/td&gt;&lt;td&gt;Arduino Mega&lt;/td&gt;&amp;lt;/tr&amp;gt;
&lt;tr&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;3V3&lt;/td&gt;&lt;td&gt;3V3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CLKOUT&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ENC-WOL&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RESET&lt;/td&gt;&lt;td&gt;RESET&lt;/td&gt;&lt;td&gt;RESET&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ENC-INT&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SCK&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;52&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MISO&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;MOSI&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;51&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CS&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;/tr&gt;
&amp;lt;/table&amp;gt;


**另外一个库的接法**
https://github.com/jcw/ethercard
该库支持DNS,DHCP 测试可用。

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;3.3V&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SCK &lt;/td&gt;&lt;td&gt;Pin 13 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SO  &lt;/td&gt;&lt;td&gt;Pin 12&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SI  &lt;/td&gt;&lt;td&gt;Pin 11&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CS  &lt;/td&gt;&lt;td&gt;Pin  8 # Selectable with the ether.begin() function&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;



&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;
</description>
        <pubDate>Sat, 09 May 2015 07:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/09/ENC28J60/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/09/ENC28J60/</guid>
        
        <category>HW</category>
        
        
      </item>
    
      <item>
        <title>Arduino－各种无线方案的对比</title>
        <description>&lt;p&gt;电磁波
初中物理
振荡的电场和磁场在空间中以波的形式传播就形成了电磁波，gamma射线、X光、紫外光、可见光、红外光、微波、无线电波和长波无线电，这些都是电磁波。电磁波具有波粒二象性，光子就是量子化的电磁波，是电磁波能量的最小单位。光子的能量和电磁波的波长成反比，比如说，波长最短的gamma射线光子能量高达百万甚至数亿电子伏，医疗和安检用的x光光子能量一般在数百到上万电子伏，紫外光的能量一般在数个到数十电子伏，可见光的能量在1.8（700纳米的红色光）到3.1电子伏（400纳米的蓝色光）之间，红外、微波和无线电波的光子能量就小的多。在电磁波和物质相互作用时，物质只能吸收或者放出整个的光子。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;蓝牙
有效距离：10－50米。
波段：低频微波。（2.4GHz）
协议：Bluetooth4.0可达50米。
特点：需要设置master还是slave，需要配对后1V1传送。&lt;/p&gt;

&lt;p&gt;WIFI
有效距离：10－100米。
波段：低频微波。（2.4GHz）
协议：IEEE802.11b可达100米。
特点：就是家里常见的无线路由器啦。&lt;/p&gt;

&lt;p&gt;红外
有效距离：1米。
波段：红外线。
协议：一般的遥控器有sony的协议，IR收发是标准化组件，在IRremote中全部有实现。
特点：不能穿，要对准，离得近。&lt;/p&gt;

&lt;p&gt;zigbee
有效距离：500米。
波段：有多波段，主要低频微波。（2.4GHz）
协议：802.15.4协议。
特点：具备了强大的设备联网功能，具有很强的网络健壮性和系统可靠性。
XBee OEM RF模块是与ZigBee/IEEE 802.15.4 兼容的解决方案，可以满足低成本低功耗无线传感网络的特殊需求。该模块易于使用，极低的功耗，以及提供设备间关键数据的可靠传输。&lt;/p&gt;

&lt;p&gt;总结
除了红外，其他几种在低频微波段混的无线技术，基本上都是同一种硬件，换不同的软件技术来达到更可靠的传输，更有效的交互。zigbee在智能家居的组网中更是被吹得不行。&lt;/p&gt;

&lt;p&gt;转载自五四陈科学院[http://www.54chen.com]&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 22:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/08/arduino-wireless-transmission-solution/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/08/arduino-wireless-transmission-solution/</guid>
        
        <category>HW</category>
        
        
      </item>
    
      <item>
        <title>外置采集温度_让arduino用2颗5号电池运行1年以上 </title>
        <description>&lt;p&gt;文章来自极客工坊，因此加密了只自己能看纯收藏
http://www.geek-workshop.com/thread-12261-1-1.html
作者：mylife1213&lt;/p&gt;

&lt;p&gt;这次讲功耗.&lt;/p&gt;

&lt;p&gt;如果你想把arduino avr类的开发项目用来便携式设置上,不管商业还是个人DIY,那么你头一个要对付的问题就是设备功耗!&lt;/p&gt;

&lt;p&gt;我测试atmega328p(大部分arduino 都是基于这个处理器) 最小系统下(16Mhz)运行功耗是10ma,那么如果不对处理器进行任何节电处理的话一块手机1500mah的电池只能不间断运行  1500/10/24=6.5天 ,这个还是在没有任何外围元器件的情况下的运行时间!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;现在物联网非常火,那么物联网正常情况是需要多个节点进行数据采集,然后上报给主机进行联网操作,或者接收主机命令进行对其他电器的操作. 那个问题就出现了,很多时候数据采集的地方是没有电源的,比如外置气象数据采集,这个时候就需要采集设备可以使用电池来驱动,而且不能频繁的更换电池!这就需要用到处理器的节电方案!&lt;/p&gt;

&lt;p&gt;下面我将介绍ATMEGA328P的节电解决方案.&lt;/p&gt;

&lt;p&gt;328P有8种节电设置,分别是:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;空闲模式&lt;/strong&gt;
当SM2..0 为000 时， SLEEP 指令将使MCU 进入空闲模式。在此模式下，CPU 停止运
行，而SPI、USART、模拟比较器、ADC、两线串行接口、定时器/ 计数器、看门狗和
中断系统继续工作。这个睡眠模式只停止了clkCPU 和clkFLASH，其他时钟则继续工作。
象定时器溢出与USART 传输完成等内外部中断都可以唤醒MCU。如果不需要从模拟比
较器中断唤醒MCU，为了减少功耗，可以切断比较器的电源。方法是置位模拟比较器控
制和状态寄存器ACSR 的ACD。如果ADC 使能，进入此模式后将自动启动一次转换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ADC 噪声抑制模式&lt;/strong&gt;
当SM2..0 为001 时， SLEEP 指令将使MCU 进入噪声抑制模式。在此模式下，CPU 停
止运行，而ADC、外部中断、两线接口地址配置、定时器/ 计数器2 和看门狗继续工作。
这个睡眠模式只停止了clkI/O、clkCPU 和clkFLASH，其他时钟则继续工作。
此模式提高了ADC 的噪声环境，使得转换精度更高。ADC 使能的时候，进入此模式将
自动启动一次AD 转换。ADC 转换结束中断、外部复位、看门狗复位、BOD 复位、两线
接口地址匹配中断、定时器/ 计数器2 中断、SPM/EEPROM 准备好中断、外部电平中断
INT0 或INT1，或外部中断INT2 可以将MCU 从ADC 噪声抑制模式唤醒。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;掉电模式&lt;/strong&gt;
当SM2..0 为010 时， SLEEP 指令将使MCU 进入掉电模式。在此模式下，外部晶体停
振，而外部中断、两线接口地址匹配及看门狗（如果使能的话）继续工作。只有外部复
位、看门狗复位、BOD 复位、两线接口地址匹配中断、外部电平中断INT0 或INT1，或
外部中断INT2 可以使MCU 脱离掉电模式。这个睡眠模式停止了所有的时钟，只有异步
模块可以继续工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;省电模式&lt;/strong&gt;
当SM2..0 为011 时， SLEEP 指令将使MCU 进入省电模式。这一模式与掉电模式只有
一点不同：
如果定时器/ 计数器2 为异步驱动，即寄存器ASSR 的AS2 置位，则定时器/ 计数器2 在
睡眠时继续运行。除了掉电模式的唤醒方式，定时器/ 计数器2 的溢出中断和比较匹配中
断也可以将MCU 从休眠方式唤醒，只要TIMSK 使能了这些中断，而且SREG 的全局中
断使能位I 置位。
如果异步定时器不是异步驱动的，建议使用掉电模式，而不是省电模式。因为在省电模式
下，若AS2 为0，则MCU 唤醒后异步定时器的寄存器数值是没有定义的。
这个睡眠模式停止了除clkASY 以外所有的时钟，只有异步模块可以继续工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standby 模式&lt;/strong&gt;
当SM2..0 为110 时， SLEEP 指令将使MCU 进入Standby 模式。这一模式与掉电模式唯一的不同之处在于振荡器继续工作。其唤醒时间只需要6 个时钟周期。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;扩展Standby 模式&lt;/strong&gt;
当SM2..0 为111 时， SLEEP 指令将使MCU 进入扩展的Standby 模式。这一模式与省掉电模式唯一的不同之处在于振荡器继续工作。其唤醒时间只需要6 个时钟周期。&lt;/p&gt;

&lt;p&gt;下图是各个模式下关闭的模块
![184547gceyoeqota2y277m.png][/img/in-post/3108120046.png]&lt;/p&gt;

&lt;p&gt;那么我们正常使用的是掉电模式,在掉电模式下328p测试耗电1ua,这是什么概念,2颗5号电池在处理器没有进行其他操作的情况下可以工作79年!
当然了,我们不可能让处理器就这样一直待机不做其他事情,我们需要定期唤醒328P,让他处理事情,比如采集温湿度,PM2.5数据发送给主机.那么如何唤醒呢? 答案是在掉电模式下你只能通过外部中断和看门狗来唤醒328P,外部中断唤醒需要外围电路,我们优先选择WDT看门狗进行唤醒.这里的看门狗不是你们知道的只有重启328P的功能!他也可以配置成中断事件! “ ISR(WDT_vect) “中断函数,通过看门狗我们就可以在不添加外围元件的情况设置唤醒时间了!&lt;/p&gt;

&lt;p&gt;下面看实例:
```c
#include &amp;lt;avr/sleep.h&amp;gt;
#include &amp;lt;avr/wdt.h&amp;gt;&lt;/p&gt;

&lt;p&gt;volatile byte data=0;&lt;/p&gt;

&lt;p&gt;void setup() {
  pinMode(13,OUTPUT);
  setup_watchdog(9);
// 0=16ms, 1=32ms,2=64ms,3=128ms,4=250ms,5=500ms
// 6=1 sec,7=2 sec, 8=4 sec, 9= 8sec
  ACSR |=_BV(ACD);//OFF ACD
  ADCSRA=0;//OFF ADC
  Sleep_avr();//Sleep_Mode
}&lt;/p&gt;

&lt;p&gt;void loop() {&lt;/p&gt;

&lt;p&gt;if(data&amp;gt;=7){
  data=0;
//——————————-
   digitalWrite(13,HIGH);
  delay(100);                      //此处是到达设置唤醒时间允许的程序
  digitalWrite(13,LOW); 
//——————————–  &lt;br /&gt;
Sleep_avr();
 }
 else {
  Sleep_avr();  //Continue Sleep
 }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//Sleep mode is activated
void setup_watchdog(int ii) {&lt;/p&gt;

&lt;p&gt;byte bb;&lt;/p&gt;

&lt;p&gt;if (ii &amp;gt; 9 ) ii=9;
  bb=ii &amp;amp; 7;
  if (ii &amp;gt; 7) bb|= (1«5);
  bb|= (1«WDCE);&lt;/p&gt;

&lt;p&gt;MCUSR &amp;amp;= ~(1«WDRF);
  // start timed sequence
  WDTCSR |= (1«WDCE) | (1«WDE);
  // set new watchdog timeout value
  WDTCSR = bb;
  WDTCSR |= _BV(WDIE);&lt;/p&gt;

&lt;p&gt;}
//WDT interrupt
ISR(WDT_vect) {&lt;/p&gt;

&lt;p&gt;++data;
 // wdt_reset();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void Sleep_avr(){
  set_sleep_mode(SLEEP_MODE_PWR_DOWN  ); // sleep mode is set here
  sleep_enable();
  sleep_mode();                        // System sleeps here
}
```&lt;/p&gt;

&lt;p&gt;这是一个配置成56秒唤醒一次对5号端口设置高电平100ms的程序,其中if(data&amp;gt;=7)是data(看门狗)超时大于7次就唤醒CPU进行高电平100ms的函数,看门狗超时时间已设置成8秒,你可以调节if(data&amp;gt;=7)设置成你想要的唤醒时间!
通过这样的节电设置以后这个程序可以运行至少几年!&lt;/p&gt;

&lt;p&gt;代码用arduino IDE写的,IDE不支持中文注释,英文注释将就看吧,不理解的代码留言解答.&lt;/p&gt;

&lt;p&gt;要改变唤醒时间是改这个函数:
if(data&amp;gt;=7) 
函数里面7的意思是有7次看门狗8秒超时复位.比如你要设置24秒那就写if(data&amp;gt;=3)
公式是:3*8=24&lt;/p&gt;

&lt;p&gt;使用休眠模式制作了一个外置气象站，使用amtega328P用nrf24l01发送ds18b20采集的数据，每2分钟发生一次，平时待机功耗控制在10ua左右，设计可以使用2颗南孚电池工作超过1年时间&lt;/p&gt;

&lt;p&gt;实物图
![211541geoqq8wodddzdqhw.png][/img/in-post/338645405.png]&lt;/p&gt;

&lt;p&gt;外置发送硬件先按照328P最小系统搭建，然后连接nrf24l01p与ds1820b.&lt;/p&gt;

&lt;p&gt;按照arduino 引脚连接如下表
&lt;code class=&quot;highlighter-rouge&quot;&gt;
arduino     nrf24l01p
13-&amp;gt;         SCK
12-&amp;gt;         MISO     
11-&amp;gt;         MOSI
8-&amp;gt;           CE
7-&amp;gt;           CSN
arduino     ds1820b
4-&amp;gt;            数据引脚，其他连接GND  VCC
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;室内接收机可以使用pro mini 和uno&lt;/p&gt;

&lt;p&gt;接线方式如下：
```
arduino     nrf24l01p&lt;/p&gt;

&lt;p&gt;13-&amp;gt;         SCK
12-&amp;gt;         MISO   &lt;br /&gt;
11-&amp;gt;         MOSI
9-&amp;gt;          CE
8-&amp;gt;         CSN&lt;/p&gt;

&lt;p&gt;2-&amp;gt;         IRQ
注意nrf24l01电源要接3.3v
```
提供代码下载
  [nrf24l01P.rar][/img/in-post/931264314.rar]&lt;/p&gt;

&lt;p&gt;read_WDT是接收机
WDT_2是室外机&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 22:16:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/08/arduino-power-save/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/08/arduino-power-save/</guid>
        
        <category>HW</category>
        
        
      </item>
    
      <item>
        <title>几个常见的语音交互平台的简介和比较</title>
        <description>&lt;p&gt;转自 http://ibillxia.github.io/blog/2012/11/24/several-plantforms-on-audio-and-speech-signal-processing/&lt;/p&gt;

&lt;p&gt;1.概述
最近做了两个与语音识别相关的项目，两个项目的主要任务虽然都是语音识别，或者更确切的说是关键字识别，但开发的平台不同， 一个是windows下的，另一个是android平台的，于是也就选用了不同的语音识别平台，前者选的是微软的Speech API开发的，后者则选用 的是CMU的pocketsphinx，本文主要将一些常见的语音交互平台进行简单的介绍和对比。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;这里所说的语音交互包含语音识别（Speech Recognition，SR，也称为自动语音识别，Automatic Speech Recognition，ASR）和语音 合成（Speech Synthesis，SS，也称为Text-To-Speech，简记为TTS）两种技术，另外还会提到声纹识别（Voice Print Recognition， 简记为VPR）技术。&lt;/p&gt;

&lt;p&gt;语音识别技术是将计算机接收、识别和理解语音信号转变为相应的文本文件或者命令的技术。它是一门涉及到语音语言学、信号处理、 模式识别、概率论和信息论、发声机理和听觉机理、人工智能的交叉学科。在语音识别系统的帮助下，即使用户不懂电脑或者无法使用 电脑，都可以通过语音识别系统对电脑进行操作。&lt;/p&gt;

&lt;p&gt;语音合成，又称文语转换（Text to Speech）技术，能将任意文字信息实时转化为标准流畅的语音朗读出来，相当于给机器装上了人工 嘴巴。它涉及声学、语言学、数字信号处理、计算机科学等多个学科技术，是中文信息处理领域的一项前沿技术，解决的主要问题就是如何 将文字信息转化为可听的声音信息，也即让机器像人一样开口说话。&lt;/p&gt;

&lt;p&gt;下面按平台是否开源来介绍几种常见的语音交互平台，关于语音识别和语音合成技术的相关原理请参见我接下来的其他文章。&lt;/p&gt;

&lt;p&gt;2.商业化的语音交互平台
1)微软Speech API
微软的Speech API（简称为SAPI）是微软推出的包含语音识别（SR）和语音合成（SS）引擎的应用编程接口（API），在Windows下应用 广泛。目前，微软已发布了多个SAPI版本（最新的是SAPI 5.4版），这些版本要么作为于Speech SDK开发包发布，要么直接被包含在windows 操作系统中发布。SAPI支持多种语言的识别和朗读，包括英文、中文、日文等。SAPI的版本分为两个家族，1-4为一个家族，这四个版本彼此 相似，只是稍微添加了一些新的功能；第二个家族是SAPI5，这个系列的版本是全新的，与前四个版本截然不同。&lt;/p&gt;

&lt;p&gt;最早的SAPI 1.0于1995年发布，支持Windows 95和Windows NT 3.51。这个版本的SAPI包含比较初级的直接语音识别和直接语音合成的API， 应用程序可以直接控制识别或合成引擎，并简化更高层次的语音命令和语音通话的API。SAPI3.0于97年发布，它添加了听写语音识别（非连续 语音识别）和一些应用程序实例。98年微软发布了SAPI4.0，这个版本不仅包含了核心的COM API，用C++类封装，使得用C++来编程更容易， 而且还有ActiveX控件，这个控件可以再VB中拖放。这个版本的SS引擎随Windows2000一起发布，而SR引擎和SS引擎又一起以SDK的形式发布。&lt;/p&gt;

&lt;p&gt;SAPI5.0 于2000年发布，新的版本将严格将应用与引擎分离的理念体现得更为充分，所有的调用都是通过动态调用sapi.dll来实现的， 这样做的目的是使得API更为引擎独立化，防止应用依赖于某个具有特定特征的引擎，这种改变也意图通过将一些配置和初始化的代码放 到运行时来使得应用程序的开发更为容易。&lt;/p&gt;

&lt;p&gt;2).IBM viaVoice
IBM是较早开始语音识别方面的研究的机构之一，早在20世纪50年代末期，IBM就开始了语音识别的研究，计算机被设计用来检测特定的语言 模式并得出声音和它对应的文字之间的统计相关性。在1964年的世界博览会上，IBM向世人展示了数字语音识别的“shoe box recognizer”。 1984年，IBM发布的语音识别系统在5000个词汇量级上达到了95%的识别率。&lt;/p&gt;

&lt;p&gt;1992年，IBM引入了它的第一个听写系统，称为“IBM Speech Server Series (ISSS)”。1996年发布了新版的听写系统，成为“VoiceType3.0”， 这是viaVoice的原型，这个版本的语音识别系统不需要训练，可以实现孤立单词的听写和连续命令的识别。VoiceType3.0支持Windows95系统， 并被集成到了OS/2 WARP系统之中。与此同时，IBM还发布了世界上首个连续听写系统“MedSpeak Radiology”。最后，IBM及时的在假日购物季节 发布了大众化的实用的“VoiceType Simply Speaking”系统，它是世界上首个消费版的听写产品(the world’s first consumer dictation product).&lt;/p&gt;

&lt;p&gt;1999年，IBM发布了VoiceType的一个免费版。2003年，IBM授权ScanSoft公司拥有基于ViaVoice的桌面产品的全球独家经销权，而ScanSoft公司 拥有颇具竞争力的产品“Dragon NaturallySpeaking”。两年后，ScanSoft与Nuance合并，并宣布公司正式更名为Nuance Communications，Inc。 现在很难找到IBM viaVoice SDK的下载地址了，它已淡出人们的视线，取而代之的是Nuance。&lt;/p&gt;

&lt;p&gt;3）Nuance
Nuance通讯是一家跨国计算机软件技术公司，总部设在美国马萨诸塞州伯灵顿，主要提供语音和图像方面的解决方案和应用。目前的业务集中 在服务器和嵌入式语音识别，电话转向系统，自动电话目录服务，医疗转录软件与系统，光学字符识别软件，和台式机的成像软件等。&lt;/p&gt;

&lt;p&gt;Nuance语音技术除了语音识别技术外，还包扩语音合成、声纹识别等技术。世界语音技术市场，有超过80%的语音识别是采用Nuance识别引擎技术， 其名下有超过1000个专利技术，公司研发的语音产品可以支持超过50种语言，在全球拥有超过20亿用户。据传，苹果的iPhone 4S的Siri语音识别中 应用了Nuance的语音识别服务。另外，据Nuance公司宣布的重磅消息，其汽车级龙驱动器Dragon Drive将在新奥迪A3上提供一个免提通讯接口， 可以实现信息的听说获取和传递。&lt;/p&gt;

&lt;p&gt;Nuance Voice Platform(NVP)是Nuance公司推出的语音互联网平台。Nuance公司的NVP平台由三个功能块组成：Nuance Conversation Server 对话服务器，Nuance Application Environment （NAE）应用环境及Nuance Management Station管理站。Nuance Conversation Server对话服务 器包括了与Nuance语音识别模块集成在一起的VoiceXML解释器，文语转换器（TTS）以及声纹鉴别软件。NAE应用环境包括绘图式的开发工具， 使得语音应用的设计变得和应用框架的设计一样便利。Nuance Management Station管理站提供了非常强大的系统管理和分析能力，它们是为了 满足语音服务的独特需要而设计的。&lt;/p&gt;

&lt;p&gt;4）科大讯飞——讯飞语音
提到科大讯飞，大家都不陌生，其全称是“安徽科大讯飞信息科技股份有限公司”，它的前身是安徽中科大讯飞信息科技有限公司，成立于99 年12月，07年变更为安徽科大讯飞信息科技股份有限公司，现在是一家专业从事智能语音及语音技术研究、软件及芯片产品开发、语音信息服务 的企业，在中国语音技术领域可谓独占鳌头，在世界范围内也具有相当的影响力。&lt;/p&gt;

&lt;p&gt;科大讯飞作为中国最大的智能语音技术提供商，在智能语音技术领域有着长期的研究积累，并在中文语音合成、语音识别、口语评测等多项 技术上拥有国际领先的成果。03年，科大讯飞获迄今中国语音产业唯一的“国家科技进步奖（二等）”，05年获中国信息产业自主创新最高荣誉 “信息产业重大技术发明奖”。06年至11年，连续六届英文语音合成国际大赛（Blizzard Challenge）荣获第一名。08年获国际说话人识别评测 大赛（美国国家标准技术研究院—NIST 2008）桂冠，09年获得国际语种识别评测大赛（NIST 2009）高难度混淆方言测试指标冠军、通用测试 指标亚军。&lt;/p&gt;

&lt;p&gt;科大讯飞提供语音识别、语音合成、声纹识别等全方位的语音交互平台。拥有自主知识产权的智能语音技术，科大讯飞已推出从大型电信级 应用到小型嵌入式应用，从电信、金融等行业到企业和家庭用户，从PC到手机到MP3/MP4/PMP和玩具，能够满足不同应用环境的多种产品，科大 讯飞占有中文语音技术市场60%以上市场份额，语音合成产品市场份额达到70%以上。&lt;/p&gt;

&lt;p&gt;5）其他
其他的影响力较大商用语音交互平台有谷歌的语音搜索（Google Voice Search），百度和搜狗的语音输入法等等，这些平台相对于以上的4个 语音交互平台，应用范围相对较为局限，影响力也没有那么强，这里就不详细介绍了。&lt;/p&gt;

&lt;p&gt;3.开源的语音交互平台
1）CMU-Sphinx
CMU-Sphinx也简称为Sphinx（狮身人面像），是卡内基 - 梅隆大学（ Carnegie Mellon University，CMU）开发的一款开源的语音识别系统， 它包括一系列的语音识别器和声学模型训练工具。&lt;/p&gt;

&lt;p&gt;Sphinx有多个版本，其中Sphinx1~3是C语言版本的，而Sphinx4是Java版的，另外还有针对嵌入式设备的精简优化版PocketSphinx。Sphinx-I 由李开复（Kai-Fu Lee）于1987年左右开发，使用了固定的HMM模型（含3个大小为256的codebook），它被号称为第一个高性能的连续语音识别 系统（在Resource Management数据库上准确率达到了90%+）。Sphinx-II由Xuedong Huang于1992年左右开发，使用了半连续的HMM模型， 其HMM模型是一个包含了5个状态的拓扑结构，并使用了N-gram的语言模型，使用了Fast lextree作为实时的解码器，在WSJ数据集上的识别率 也达到了90%+。&lt;/p&gt;

&lt;p&gt;Sphinx-III主要由Eric Thayer 和Mosur Ravishankar于1996年左右开发，使用了完全连续的（也支持半连续的）HMM模型，具有灵活 的feature vector和灵活的HMM拓扑结构，包含可选的两种解码器：较慢的Flat search和较快的Lextree search。该版本在BN（98的测评数据 集）上的WER（word error ratio）为19%。Sphinx-III的最初版还有很多limitations，诸如只支持三音素文本、只支持Ngram模型（不 支持CFG/FSA/SCFG）、对所有的sound unit其HMM拓扑结构都是相同的、声学模型也是uniform的。Sphinx-III的最新版是09年初发布的0.8版， 在这些方面有很多的改进。&lt;/p&gt;

&lt;p&gt;最新的Sphinx语音识别系统包含如下软件包：
 Pocketsphinx — recognizer library written in C.
 Sphinxbase — support library required by Pocketsphinx
 Sphinx4 — adjustable, modifiable recognizer written in Java
 CMUclmtk — language model tools
 Sphinxtrain — acoustic model training tools
这些软件包的可执行文件和源代码在sourceforge上都可以免费下载得到。&lt;/p&gt;

&lt;p&gt;2）HTK
HTK是Hidden Markov Model Toolkit（隐马尔科夫模型工具包）的简称，HTK主要用于语音识别研究，现在已经被用于很多其他方面的研究， 包括语音合成、字符识别和DNA测序等。&lt;/p&gt;

&lt;p&gt;HTK最初是由剑桥大学工程学院（Cambridge University Engineering Department ，CUED）的机器智能实验室（前语音视觉及机器人组） 于1989年开发的，它被用来构建CUED的大词汇量的语音识别系统。93年Entropic Research Laboratory Inc.获得了出售HTK的权利，并在95年 全部转让给了刚成立的Entropic Cambridge Research Laboratory Ltd，Entropic一直销售着HTK，直到99年微软收购了Entropic，微软重新 将HTK的版权授予CUED，并给CUED提供支持，这样CUED重新发布了HTK，并在网络上提供开发支持。&lt;/p&gt;

&lt;p&gt;HTK的最新版本是09年发布的3.4.1版，关于HTK的实现原理和各个工具的使用方法可以参看HTK的文档HTKBook。&lt;/p&gt;

&lt;p&gt;3）Julius
Julius是一个高性能、双通道的大词汇量连续语音识别（large vocabulary continues speech recognition，LVCSR）的开源项目， 适合于广大的研究人员和开发人员。它使用3-gram及上下文相关的HMM，在当前的PC机上能够实现实时的语音识别，单词量达到60k个。&lt;/p&gt;

&lt;p&gt;Julius整合了主要的搜索算法，高度的模块化使得它的结构模型更加独立，它同时支持多种HMM模型（如shared-state triphones 和 tied-mixture models等），支持多种麦克风通道，支持多种模型和结构的组合。它采用标准的格式，这使得和其他工具箱交叉使用变得 更容易。它主要支持的平台包括Linux和其他类Unix系统，也适用于Windows。它是开源的，并使用BSD许可协议。&lt;/p&gt;

&lt;p&gt;自97年后，Julius作为日本LVCSR研究的一个自由软件工具包的一部分而延续下来，后在2000年转由日本连续语音识别联盟(CSRC)经营。 从3.4版起，引入了被称为“Julian”的基于语法的识别解析器，Julian是一个改自Julius的以手工设计的DFA作为语言模型的版本，它可以 用来构建小词汇量的命令识别系统或语音对话系统。&lt;/p&gt;

&lt;p&gt;4）RWTH ASR
该工具箱包含最新的自动语音识别技术的算法实现，它由 RWTH Aachen 大学的Human Language Technology and Pattern Recognition Group 开发。&lt;/p&gt;

&lt;p&gt;RWTH ASR工具箱包括声学模型的构建、解析器等重要部分，还包括说话人自适应组件、说话人自适应训练组件、非监督训练组件、个性化 训练和单词词根处理组件等，它支持Linux和Mac OS等操作系统，其项目网站上有比较全面的文档和实例，还提供了现成的用于研究目的的 模型等。&lt;/p&gt;

&lt;p&gt;该工具箱遵从一种从QPL发展而来的开源协议，只允许用于非商业用途。&lt;/p&gt;

&lt;p&gt;5）其他
上面提到的开源工具箱主要都是用于语音识别的，其他的开源语音识别项目还有Kaldi 、simon 、iATROS-speech 、SHoUT 、 Zanzibar OpenIVR 等。&lt;/p&gt;

&lt;p&gt;常见的语音合成的开源工具箱有MARY、SpeakRight、Festival 、FreeTTS 、Festvox 、eSpeak 、Flite 等。&lt;/p&gt;

&lt;p&gt;常见的声纹识别的开源工具箱有Alize、openVP等。&lt;/p&gt;

&lt;p&gt;4.小结
本文介绍了几种常见的语音交互平台，主要是语音识别、语音合成的软件或工具包，还顺便提到了声纹识别的内容， 下面做一个简单的总结：&lt;/p&gt;

&lt;p&gt;以上总结的表格希望对读者有用！
参考文献
[1]语音识别-维基百科：http://zh.wikipedia.org/wiki/语音识别 
[2]语音合成-百度百科：http://baike.baidu.com/view/549184.htm 
[3] Microsoft Speech API：http://en.wikipedia.org/wiki/Speech_Application_Programming_Interface#SAPI_1 
[4] MSDN-SAPI：http://msdn.microsoft.com/zh-cn/library/ms723627.aspx 
[5] 微软语音技术 Windows 语音编程初步：http://blog.csdn.net/yincheng01/article/details/3511525 
[6]IBM Human Language Technologies History：http://www.research.ibm.com/hlt/html/history.html 
[7] Nuance: http://en.wikipedia.org/wiki/Nuance_Communications 
[8] 科大讯飞：http://baike.baidu.com/view/362434.htm 
[9] CMU-Sphinx: http://en.wikipedia.org/wiki/CMU_Sphinx 
[10] CMU Sphinx homepage：http://cmusphinx.sourceforge.net/wiki/ 
[11] HTK Toolkit：http://htk.eng.cam.ac.uk/ 
[12] Julius：http://en.wikipedia.org/wiki/Julius_(software) 
[13] RWTH ASR：http://en.wikipedia.org/wiki/RWTH_ASR 
[14] List of speech recognition software: http://en.wikipedia.org/wiki/List_of_speech_recognition_software 
[15] Speech recognition: http://en.wikipedia.org/wiki/Speech_recognition 
[16] Speech synthesis: http://en.wikipedia.org/wiki/Speech_synthesis 
[17] Speaker recognition: http://en.wikipedia.org/wiki/Speaker_recognition&lt;/p&gt;

&lt;p&gt;Original Link: http://ibillxia.github.io/blog/2012/11/24/several-plantforms-on-audio-and-speech-signal-processing/
Attribution - NON-Commercial - ShareAlike - Copyright © Bill Xia&lt;/p&gt;

</description>
        <pubDate>Mon, 04 May 2015 16:36:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/04/speech-signal-processing/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/04/speech-signal-processing/</guid>
        
        <category>RD</category>
        
        
      </item>
    
      <item>
        <title>关于矩阵</title>
        <description>&lt;p&gt;&lt;strong&gt;转的啊&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;人总是会为自己找捷径，而往往捷径是要付出不一般的代价。
呵呵—说说矩阵的事：
通过坐标变换将3D空间的图元转换成2D图元的过程：主要为世界变换-&amp;gt;视图变换-&amp;gt;投影变换-&amp;gt;视口变换
3D场景中的任何物体，都是由一个一个三角形组成的。而三角形位置信息的就是其各个顶点的三维坐标。这是用来在模型中存储的，而要把物体显示在屏幕上，还需要将它们转换成显示器上的二维坐标。这就需要对每个点实施一套 3 to 2 的转换公式，在Direct3D中叫做“几何流水线”（Geometry Pipeline)。
一般创建的mesh处于自己的局部坐标系。基本是屏幕正中放置。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;世界矩阵：而游戏需要先放入世界坐标系。世界坐标系主要3大功能：平移、旋转、缩放
平移:  D3DXMatrixTranslation() 位于矩阵第四行
&lt;code class=&quot;highlighter-rouge&quot;&gt;
1   0   0   0
0   1   0   0
0   0   1   0
Tx Ty Tz  1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;旋转: D3DXMatrixRotationX()  延 x 轴旋转
&lt;code class=&quot;highlighter-rouge&quot;&gt;
1    0    0    0
0  cos  sin   0
0 -sin   cos  0
0    0    0    1
&lt;/code&gt;
D3DXMatrixRotationY()  延 y 轴旋转
&lt;code class=&quot;highlighter-rouge&quot;&gt;
cos 0  -sin   0
0    1    0    0
sin  0   cos  0
0    0    0    1
&lt;/code&gt;
D3DXMatrixRotationZ()  延 z 轴旋转
&lt;code class=&quot;highlighter-rouge&quot;&gt;
cos sin   0   0
-sin cos  0  0
0    0    1    0
0    0    0    1
&lt;/code&gt;
缩放: D3DXMatrixScaling&lt;/p&gt;

&lt;p&gt;顺序如先旋转R在缩放S 则矩阵为 R*S 。对于行向量（dx默认为行向量）复合矩阵视觉效果为从左到右的顺序各单独矩阵效果的组合。对于列向量则相反: 复合矩阵应为 S * R.视觉效果从右到左（这是opengl 采用的）&lt;/p&gt;

&lt;p&gt;观察矩阵：函数 D3DXMatrixLookAtLH()
不要被这个函数吓倒。其实观察矩阵作用和世界矩阵差不多,只是起到旋转、平移的作用。而且是把世界坐标系的物体映射到观察坐标系。只要用摄像机世界变换的逆就好了
&lt;code class=&quot;highlighter-rouge&quot;&gt;V = T*Rz*Ry*Rz 。&lt;/code&gt;
实际上可以先获得摄像机的世界坐标 p，和摄像机坐标系轴在世界坐标中的矢量D(看向),U（上）,R（右）。然后要把世界坐标的摄像机位置点换算到摄像机局部坐标系中。 (-D * p, - U * p, - R * p)  计算-p 在（D,U,R）矢量上的投影转换为p1. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;
Dx, Ux,  Rx,  0
Dy, Uy,  Ry, 0
Dz, Uz,  Rz,  0
p1x,p1yp1z, 1
&lt;/code&gt;
对于D,U,R 其实就是摄像机的世界坐标旋转变换的逆矩阵。如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;
Dx,Dy,Dz
Ux,Uy,Uz
Rx,Ry,Rz
&lt;/code&gt;
旋转矩阵（还有镜像矩阵）为正交矩阵（参考3D数学基础中的矩阵正交化章节）。所以他的逆矩阵等于转置矩阵&lt;/p&gt;

&lt;p&gt;这些不会影响mesh 的顶点和法线关系
使用shader时。如计算顶点和法线的点积，没必要映射到观察坐标系.在 direct3d 游戏编程基础的 shader 章节里。顶点法线和光线矢量都映射到了视图空间。其实是没有必要的&lt;/p&gt;

&lt;p&gt;而世界变化和观察变换是可以和到一起组成世界-视图变换矩阵&lt;/p&gt;

&lt;p&gt;投影变换：把3d 投影到2d平面。（似乎说映射[-1,-1,0(opengl 为-1)] 到[1,1,1]的立方体更好一些）分为透视投影和正交投影。正交投影不会随物体远近影响物体投影的大小。而透视则z值影响，物体越远成像越小。
投影变换涉及缩放和平移操作。对于正交投影矩阵缩放和z值无关。对于透视投影缩放和z值相关。
对于dx 左手坐标系函数如下：
正交投影函数:
D3DXMatrixOrthoLH() 这个是以屏幕中心为坐标原点的。
如果设置2d坐标系。 可以考虑使用 D3DXMatrixOrthoOffCenterLH 函数
D3DXMatrixOrthoOffCenterLH(&amp;amp;m_matProj,0,(float)m_iWidth,(float)m_iHeight,0,0.0f,1.0f); 
这样左上角为坐标(0,0). 右下角为（width,height）
透视投影：
D3DXMatrixPerspectiveFovLH()
对于Opengl经过投影变换x,y,z映射到范围[-1,1]. x,y 还保持原来的符号。对于z 最远面 f 映射为1，最近面 n 映射为 -1.
但directx z 值略有差异。z 映射范围为[0,1]。最远面映射为1。最近面映射为0. 
对于z值都是以 1/z 映射到 [0,1]或者[-1,1] 范围。因为一般要求近处z值判断要精细一些。而远处精度要小一些。所以用1/z来判断更好。
一个dx 投影矩阵如下： w,h 为 zn 面的宽度和高度。zn 近表面距离。zf 为远表面。
&lt;code class=&quot;highlighter-rouge&quot;&gt;
2*zn/w 0 0 0
0 2*zn/h 0 0
0 0 zf/(zf-zn) 1
0 0 zn*zf/(zn-zf) 0
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其次坐标一个点p(px,py,pz,1) 经过这个变化成为(x’pz,y’pz,z’pz,pz)
dx 一直透视投影函数一直默认了中心点为[0,0] (摄像机坐标x,y). 如果视景截头体不以[0,0]为中心则需要自己生成投影矩阵。
如对于zn平面，左l 右 r 上 t 下 b.这样 w = r - l  h = t - b .建立的非对称投影矩阵如下（相对于dx左手坐标,对于opengl略有不同）
&lt;code class=&quot;highlighter-rouge&quot;&gt;
2*zn/r-l 0 0 0
0 2*zn/t-b 0 0
r+l/r-l t+b/t-b zf/(zf-zn) 1
0 0 zn*zf/(zn-zf) 0
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;dx 采用的是行向量，对于一个矢量 v 变换相当于  v * T.  而不是 T * v
opengl 采用的是列向量, 对于矢量变化为 T * v&lt;/p&gt;

&lt;p&gt;左手坐标系和右手坐标系平移、缩放矩阵是相同的。
对于旋转矩阵，输入角度时有变化：
从轴的负端向正端看，左手坐标系  逆时针为正方向。即逆时针延z旋转旋转30 度。输入正数30 到旋转矩阵.
而右手坐标系相反，逆时针为负方向。即逆时针延z旋转30度。输入-30 到旋转矩阵&lt;/p&gt;

&lt;p&gt;用U0 U1 U2 表示变换矩阵， 对于矩阵 R(U0 | U1 | U2) 
对于右手坐标 U0 = U1 X U2   U1 = U2 X U0 U2 = U0 X U1
对于左手坐标 U0 = U2 X U1   U1 = U0 X U2 U2 = U1 X U0&lt;/p&gt;

&lt;p&gt;而有些系统如gamebryo 采用右手坐标系，这样虽然输入-30度，再经过转置成列向量矩阵，经过2次变换和dx的旋转矩阵结果反倒是相同的。但 dx 是 向量 v * T . 而 gamebryo 由于列向量 是 T * V. 不能被相同的值所迷惑.
实际上是Gamebryo旋转方向和右手坐标系相反，我日。要自己输入符号。好处换成左手不用修改矩阵了&lt;/p&gt;

&lt;p&gt;dx 矩阵存放结构
&lt;code class=&quot;highlighter-rouge&quot;&gt;
struct {
        float        _11, _12, _13, _14;    
        float        _21, _22, _23, _24;
        float        _31, _32, _33, _34;
        float        _41, _42, _43, _44; 
};
&lt;/code&gt;
DX里面一些好用的矩阵变换函数也记录下：
D3DXMatrixLookAtLH：根据摄像机的三个属性坐标计算视矩阵(左手)
&lt;code class=&quot;highlighter-rouge&quot;&gt;
zaxis = normal(At - Eye)
xaxis = normal(cross(Up, zaxis))
yaxis = cross(zaxis, xaxis)
&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
xaxis.x yaxis.x zaxis.x 0
xaxis.y yaxis.y zaxis.y 0
xaxis.z yaxis.z zaxis.z 0
-dot(xaxis, eye) -dot(yaxis, eye) -dot(zaxis, eye) 1 D3DXMatrixLookAtRH ：根据摄像机的三个属性坐标计算
&lt;/code&gt;
```
视矩阵(右手)zaxis = normal(Eye - At)
xaxis = normal(cross(Up, zaxis))
yaxis = cross(zaxis, xaxis)&lt;/p&gt;

&lt;p&gt;xaxis.x yaxis.x zaxis.x 0
xaxis.y yaxis.y zaxis.y 0
xaxis.z yaxis.z zaxis.z 0
-dot(xaxis, eye) -dot(yaxis, eye) -dot(zaxis, eye) 1
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
D3DXMatrixOrthoLH：根据宽高和远近平面计算（0，0在窗口中心）正交投影矩阵(左手)
&lt;/code&gt;
2/w 0 0 0
0 2/h 0 0
0 0 1/(zf-zn) 0
0 0 zn/(zn-zf) 1
```&lt;/p&gt;

&lt;p&gt;D3DXMatrixOrthoOffCenterLH：根据宽高和远近平面计算离心(0，0在窗口左上角)正交投影矩阵(左手)
r,l,b,t分别为右，左，下，上的坐标
&lt;code class=&quot;highlighter-rouge&quot;&gt;
2/(r-l) 0 0 0
0 2/(t-b) 0 0
0 0 1/(zf-zn) 0
(l+r)/(l-r) (t+b)/(b-t) zn/(zn-zf) 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D3DXMatrixOrthoOffCenterRH：根据宽高和远近平面计算（0，0在窗口中心）正交投影矩阵(右手)
&lt;code class=&quot;highlighter-rouge&quot;&gt;
2/(r-l) 0 0 0
0 2/(t-b) 0 0
0 0 1/(zn-zf) 0
(l+r)/(l-r) (t+b)/(b-t) zn/(zn-zf) 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D3DXMatrixOrthoRH：根据宽高和远近平面计算（0，0在窗口中心）正交投影矩阵(右手)
&lt;code class=&quot;highlighter-rouge&quot;&gt;
2/w 0 0 0
0 2/h 0 0
0 0 1/(zn-zf) 0
0 0 zn/(zn-zf) 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D3DXMatrixPerspectiveFovLH：左手透视投影（参数为纵横张角和远近平面）
```
xScale 0 0 0
0 yScale 0 0
0 0 zf/(zf-zn) 1
0 0 -zn*zf/(zf-zn) 0
where:
yScale = cot(fovY/2)&lt;/p&gt;

&lt;p&gt;xScale = aspect ratio * yScale
&lt;code class=&quot;highlighter-rouge&quot;&gt;
D3DXMatrixPerspectiveFovRH：右手透视投影（参数为纵横张角和远近平面）
&lt;/code&gt;
xScale 0 0 0
0 yScale 0 0
0 0 zf/(zn-zf) -1
0 0 zn*zf/(zn-zf) 0
where:
yScale = cot(fovY/2)&lt;/p&gt;

&lt;p&gt;xScale = aspect ratio * yScale
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
D3DXMatrixPerspectiveLH：实境体投影矩阵
&lt;/code&gt;
(D3DXMatrixPerspectiveLH(&amp;amp;matProj,D3DX_PI/4,1.0f,1.0f,100.0f);)
2&lt;em&gt;zn/w 0 0 0
0 2&lt;/em&gt;zn/h 0 0
0 0 zf/(zf-zn) 1
0 0 zn*zf/(zn-zf) 0&lt;/p&gt;

&lt;p&gt;D3DXMatrixPerspectiveOffCenterLH：
2&lt;em&gt;zn/(r-l) 0 0 0
0 2&lt;/em&gt;zn&lt;em&gt;(t-b) 0 0
(l+r)/(l-r) (t+b)/(b-t) zf/(zf-zn) 1
0 0 zn&lt;/em&gt;zf/(zn-zf) 0D3&lt;/p&gt;

&lt;p&gt;DXMatrixPerspectiveOffCenterRH
2&lt;em&gt;zn/(r-l) 0 0 0
0 2&lt;/em&gt;zn/(t-b) 0 0
(l+r)/(r-l) (t+b)/(t-b) zf/(zn-zf) -1
0 0 zn*zf/(zn-zf) 0&lt;/p&gt;

&lt;p&gt;D3DXMatrixPerspectiveRH：
2&lt;em&gt;zn/w 0 0 0
0 2&lt;/em&gt;zn/h 0 0
0 0 zf/(zn-zf) -1
0 0 zn*zf/(zn-zf) 0
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
D3DXMatrixReflect：根据平面方程计算反射矩阵
P = normalize(Plane);
&lt;/code&gt;
-2 * P.a * P.a + 1 -2 * P.b * P.a -2 * P.c * P.a 0
-2 * P.a * P.b -2 * P.b * P.b + 1 -2 * P.c * P.b 0
-2 * P.a * P.c -2 * P.b * P.c -2 * P.c * P.c + 1 0
-2 * P.a * P.d -2 * P.b * P.d -2 * P.c * P.d 1
```&lt;/p&gt;

&lt;p&gt;有这些矩阵的计算方式，在opengl中也使用同样的矩阵就可以了&lt;/p&gt;

</description>
        <pubDate>Mon, 04 May 2015 16:36:00 +0800</pubDate>
        <link>http://vnzmi.com/2015/05/04/matrix/</link>
        <guid isPermaLink="true">http://vnzmi.com/2015/05/04/matrix/</guid>
        
        <category>RD</category>
        
        
      </item>
    
  </channel>
</rss>
